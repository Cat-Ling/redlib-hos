name: Tailscale features test

on:
  workflow_dispatch:

jobs:
  tailscale_exit_ssh:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # adjust if you have a self-hosted runner with longer allowed runtime
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites & Tailscale
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y curl iproute2 iptables iptables-persistent openssh-server
          # Install tailscale
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Prepare SSHD
        run: |
          set -eux
          # Ensure sshd runtime dir exists and SSHD is enabled
          sudo mkdir -p /var/run/sshd
          sudo systemctl enable ssh || true
          sudo systemctl restart ssh

      - name: Enable forwarding & NAT for IPv4 and enable IPv6 forwarding
        run: |
          set -eux
          # Enable IP forwarding
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo sysctl -w net.ipv6.conf.all.forwarding=1
          # Persist sysctl settings (best-effort)
          echo "net.ipv4.ip_forward=1" | sudo tee /etc/sysctl.d/99-github-tailscale.conf
          echo "net.ipv6.conf.all.forwarding=1" | sudo tee -a /etc/sysctl.d/99-github-tailscale.conf
          sudo sysctl --system >/dev/null || true

          # Detect main egress interface for IPv4 and IPv6 (best-effort)
          # IPv4:
          EG_IF_IPV4=$(ip route get 1.1.1.1 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i=="dev") {print $(i+1); exit}}')
          # IPv6:
          EG_IF_IPV6=$(ip -6 route get 2001:4860:4860::8888 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i=="dev") {print $(i+1); exit}}' || true)

          # Fallback to 'eth0' if detection fails
          EG_IF_IPV4=${EG_IF_IPV4:-eth0}
          EG_IF_IPV6=${EG_IF_IPV6:-$EG_IF_IPV4}

          echo "Using IPv4 egress interface: $EG_IF_IPV4"
          echo "Using IPv6 egress interface: $EG_IF_IPV6"

          # Add IPv4 NAT (masquerade) so exit-node clients' IPv4 traffic can reach internet
          sudo iptables -t nat -C POSTROUTING -o "$EG_IF_IPV4" -j MASQUERADE 2>/dev/null || \
            sudo iptables -t nat -A POSTROUTING -o "$EG_IF_IPV4" -j MASQUERADE

          # Allow forwarding through iptables
          sudo iptables -C FORWARD -i tailscale0 -o "$EG_IF_IPV4" -j ACCEPT 2>/dev/null || \
            sudo iptables -A FORWARD -i tailscale0 -o "$EG_IF_IPV4" -j ACCEPT
          sudo iptables -C FORWARD -i "$EG_IF_IPV4" -o tailscale0 -m state --state RELATED,ESTABLISHED -j ACCEPT 2>/dev/null || \
            sudo iptables -A FORWARD -i "$EG_IF_IPV4" -o tailscale0 -m state --state RELATED,ESTABLISHED -j ACCEPT

          # IPv6: accept forwarding (NAT for IPv6 is uncommon; we'll ensure forwarding is allowed)
          sudo ip6tables -C FORWARD -i tailscale0 -o "$EG_IF_IPV6" -j ACCEPT 2>/dev/null || \
            sudo ip6tables -A FORWARD -i tailscale0 -o "$EG_IF_IPV6" -j ACCEPT
          sudo ip6tables -C FORWARD -i "$EG_IF_IPV6" -o tailscale0 -m state --state RELATED,ESTABLISHED -j ACCEPT 2>/dev/null || \
            sudo ip6tables -A FORWARD -i "$EG_IF_IPV6" -o tailscale0 -m state --state RELATED,ESTABLISHED -j ACCEPT

          # Persist iptables rules (best-effort)
          sudo sh -c "iptables-save > /etc/iptables/rules.v4"
          sudo sh -c "ip6tables-save > /etc/iptables/rules.v6"

      - name: Tailscale up: auth, SSH, advertise exit-node + IPv4/IPv6 routes
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          set -eux
          if [ -z "$TAILSCALE_AUTH_KEY" ]; then
            echo "ERROR: TAILSCALE_AUTH_KEY secret is required." >&2
            exit 2
          fi

          # Start tailscaled (install script normally does this)
          sudo systemctl enable --now tailscaled || true

          # Bring up tailscale with SSH enabled and advertise itself as an exit node,
          # also advertise IPv4 and IPv6 default routes (0.0.0.0/0 and ::/0).
          # NOTE: advertising default routes may require admin approval in the Tailscale admin console.
          sudo tailscale up \
            --authkey="$TAILSCALE_AUTH_KEY" \
            --ssh \
            --advertise-exit-node \
            --advertise-routes=0.0.0.0/0,::/0

          # Show status
          sudo tailscale status --json || sudo tailscale status

      - name: Confirm tailscale IP & readiness
        run: |
          set -eux
          echo "Tailscale IP(s):"
          tailscale ip -4 || true
          tailscale ip -6 || true
          tailscale status

      - name: Random Output Loop (keeps job running)
        run: |
          set -eux
          echo "Starting random output loop. Press Ctrl+C in the runner logs to stop (or cancel the workflow)."
          # Example custom phrase list (change as you like)
          PHRASES=(
            "🍀 all systems go"
            "🔁 heartbeat"
            "✨ ephemeral runner alive"
            "🛰 tailscale tunnel active"
            "🔐 ssh ready"
            "🌐 advertising exit node"
            "🕒 minute tick"
            "🌟 random thought"
          )
          while true; do
            # print timestamp and a random phrase
            i=$((RANDOM % ${#PHRASES[@]}))
            echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ") - ${PHRASES[$i]}"
            sleep 60
          done
